@page "/quartos"
@attribute [Authorize(Roles = "Admin, Quartos")]
@inject ApplicationDbContext dbContext
@inject IToastService ToastService
@inject IModalService Modal

<PageTitle>Quartos</PageTitle>
<h3>Quartos</h3>

<style>/* CSS global ou em um arquivo .css/_sass carregado após o Bootstrap */
    .sticky-top {
        z-index: 99; /* abaixo do backdrop (1040) e do modal (1050) */
    }
</style>

<div class="sticky-top bg-white shadow-sm py-2">
    <div class="container">
        <div class="row align-items-center mb-3">
            <div class="col">
                <select class="form-select" @bind="selectedFloor">
                    @foreach (var floor in floors)
                    {
                        <option value="@floor">@floor</option>
                    }
                </select>
            </div>
            <div class="col">
                <select class="form-select" @bind="selectedState">
                    @foreach (var state in stateOptions)
                    {
                        <option value="@state">@state</option>
                    }
                </select>
            </div>
            <div class="col-auto">
                <button class="btn btn-primary" @onclick="SaveSelectedRooms">Alterar estados</button>
            </div>
        </div>
    </div>
</div>

<!-- Main Content -->
<div class="container">
    <div class="row">
        @foreach (var room in filteredRooms)
        {
            // Determine if this room is “selectable”
            bool canSelect = room.Estado != selectedState;

            <div class="col-12 col-md-3 mb-3">
                <div class="card position-relative
                    @(room.Selecionado ? "border border-primary" : "")
                    @(canSelect ? "selectable-room" : "disabled-room")"
                     @onclick="() => { if (room.Estado != selectedState) ToggleRoomSelection(room); }"
                     style="cursor: @(canSelect ? "pointer" : "not-allowed"); opacity: @(canSelect ? 1 : 0.5)">

                    @if (room.Selecionado)
                    {
                        <img src="/resources/icons-check-resized.png" alt="Selected"
                             class="position-absolute"
                             style="top: 10px; right: 10px; width: 20px; height: 20px;" />
                    }
                    <div class="card-body d-flex flex-row align-items-center p-3">
                        <div style="width: 10px; height: 100px; background-color: @GetColorForState(room.Estado); margin-right: 15px;"></div>
                        <div>
                            <h5 class="card-title">@room.Codigo</h5>
                            <p class="card-text">
                                Para: @room.Lotacao pessoas<br />
                                Andar: @room.Piso<br />
                                Estado: @room.Estado
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<string> floors = new List<string>();
    private string selectedFloor
    {
        get => _selectedFloor;
        set
        {
            _selectedFloor = value;
            ClearRoomSelections();
            filteredRooms = QuartosController.ListaQuartos.Where(r => r.Piso == _selectedFloor).ToList();
        }
    }
    private string _selectedFloor;

    private List<string> stateOptions = new List<string>();
    private string selectedState = "";
    private List<Quarto> filteredRooms = new List<Quarto>();
    private Dictionary<string, Color> stateColors;

    protected override async Task OnInitializedAsync()
    {
        await QuartosController.CarregaQuartosAsync(dbContext);
        floors = QuartosController.ListaQuartos.Select(q => q.Piso)
                   .Distinct().OrderBy(x => x).ToList();
        selectedFloor = floors.First();

        stateOptions = await QuartosController.GetRoomStateOptionsAsync(dbContext);
        if (stateOptions.Any())
        {
            selectedState = stateOptions.First();
        }
        stateColors = await QuartosController.GetStateColorsAsync(dbContext);
    }

    private void ClearRoomSelections()
    {
        foreach (var room in QuartosController.ListaQuartos)
            room.Selecionado = false;
    }

    private void ToggleRoomSelection(Quarto room)
    {
        room.Selecionado = !room.Selecionado;
    }

    private string GetColorForState(string state)
    {
        if (stateColors != null && stateColors.TryGetValue(state, out Color color))
        {
            return $"#{color.R:X2}{color.G:X2}{color.B:X2}";
        }
        return "#000000";
    }

    private async Task SaveSelectedRooms()
    {
        var roomsToUpdate = QuartosController.ListaQuartos
                              .Where(r => r.Selecionado)
                              .ToList();
        if (!roomsToUpdate.Any())
        {
            ToastService.ShowWarning("Selecione pelo menos um quarto.");
            return;
        }

        var changes = roomsToUpdate
            .Select(r => (r.Codigo, Old: r.Estado, New: selectedState))
            .ToList();

        var parameters = new ModalParameters();
        parameters.Add(nameof(QuartosConfirmationModal.Changes), changes);

        // Show the modal and await the result
        var modalRef = Modal.Show<QuartosConfirmationModal>(
            "Confirmar alterações", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled)
            return;  // user clicked "Não"

        // user clicked "Sim"
        foreach (var room in roomsToUpdate)
        {
            await QuartosController
                .AlteraEstadoQuartoAsync(dbContext, room, new EstadoQuarto { Codigo = selectedState });

            room.Estado = selectedState;
            room.Selecionado = false;
        }

        ToastService.ShowSuccess("Salvo com sucesso!");
    }
}
