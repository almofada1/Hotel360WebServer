@page "/checkins"
@using Microsoft.AspNetCore.WebUtilities
@attribute [Authorize(Roles = "Admin, Check-Ins")]
@inject ApplicationDbContext dbContext
@inject IModalService Modal
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Check-Ins</PageTitle>
<h3>Check-Ins</h3>

<div class="top-row ps-3 navbar navbar-dark">
    <h4>Data do hotel: @dia</h4>
</div>

<div class="container mt-4">
    @if (checkins == null || !checkins.Any())
    {
        <p>Não existem check-ins para @dia</p>
    }
    else
    {
        <div class="row">
            @foreach (var checkin in checkins)
            {
                <div class="col-md-4 mb-3">
                    <div class="card h-100" style="cursor: pointer;" @onclick="() => ShowModal(checkin)">
                        <div class="card-body">
                            <h4 class="card-title"><strong>Reserva: </strong>@checkin.CodigoReserva</h4>
                            <p class="card-text">
                                <strong>Nome:</strong> @checkin.NomeHospede<br />
                                <strong>Apelido:</strong> @checkin.ApelidoHospede<br />
                                <strong>Quarto:</strong> @checkin.CodigoAlojamento<br />
                                <strong>Package:</strong> @checkin.CodigoPackage<br />
                                <strong>Check-In:</strong> @checkin.DataCheckIn.ToString("dd-MM-yyyy")<br />
                                <strong>Check-Out:</strong> @checkin.DataCheckOut.ToString("dd-MM-yyyy")<br />
                            </p>
                        </div>

                        <div class="card-footer" style="@GetFooterStyle(checkin)">
                            @checkin.CodigoEstadoReserva
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>


@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "reserva")]
    public string? CodigoReserva { get; set; }

    private static List<CheckIn> checkins = new List<CheckIn>();
    private string? dia;

    protected override async Task OnInitializedAsync()
    {
        dia = (await CheckInsController.GetDia(dbContext)).ToString("dd-MM-yyyy");
        checkins = await CheckInsController.CarregaCheckinsDeDataAsync(dbContext);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(CodigoReserva))
        {
            // 1) Abre o modal
            var current = checkins.FirstOrDefault(ci => ci.CodigoReserva == CodigoReserva);
            if (current != null)
            {
                var parameters = new ModalParameters();
                parameters.Add("CheckIn", current);
                Modal.Show<CheckInsModal>("Ficha de cliente", parameters);
            }
            else
            {
                ToastService.ShowError("Reserva não encontrada.");
            }
        
            // 2) Limpa só a query da barra sem desmontar o componente
            await JSRuntime.InvokeVoidAsync("history.replaceState", null, "", "/checkins");
        }
    }

    private async void ShowModal(CheckIn checkin)
    {
        var parameters = new ModalParameters();
        parameters.Add("CheckIn", checkin);
        var modalRef = Modal.Show<CheckInsModal>("Ficha de cliente", parameters);
        var result = await modalRef.Result;
        if(result.Confirmed){
            checkins = await CheckInsController.CarregaCheckinsDeDataAsync(dbContext);
            StateHasChanged();
        }
    }

    private string GetFooterStyle(CheckIn checkin)
    {
        if (checkin.CodigoEstadoReserva == "CKI")
        {
            return "background-color: green; color: white; font-weight: bold;";
        }
        else
        {
            return "background-color: red; color: white; font-weight: bold;";
        }
    }
}
