@page "/refeicoes"
@attribute [Authorize(Roles = "Admin, Refeições")]
@using System.Globalization
@inject IToastService ToastService
@inject ApplicationDbContext dbContext

<h3>Refeições</h3>

@if (IsLoadingPage)
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading…</span>
    </div>
}
else
{
    <!-- Top Bar: Date Pickers only -->
    <div class="bg-white py-2 mb-3">
        <div class="container">
            <div class="row justify-content-center align-items-center">
                <div class="col-auto">
                    <label class="form-label mb-0 me-2">De</label>
                    <input type="date"
                           class="form-control"
                           @bind="From" />
                </div>
                <div class="col-auto">
                    <label class="form-label mb-0 me-2">Até</label>
                    <input type="date"
                           class="form-control"
                           @bind="To" />
                </div>

                <div class="col-auto" style="margin-top:20px">
                    <button class="btn btn-primary" @onclick="ReloadDataClicked">Atualizar</button>
                </div>
            </div>
        </div>
    </div>


    <!-- Cards Section -->
    @if (IsLoadingData)
    {
        <div class="text-center mb-3">
            <div class="spinner-border text-secondary" role="status">
                <span class="sr-only">Updating…</span>
            </div>
        </div>
    }
    else{
        <div class="container mb-4">
            <div class="d-flex justify-content-center gap-3 flex-wrap">
                @foreach (var m in new[] { MealType.PequenoAlmoco, MealType.Almoco, MealType.Jantar })
                {
                    var (adults, children) = MealTotals[m];
                    var totalCount = adults + children;

                    <div class="col-md-3 col-sm-6 mb-2"
                    @onclick="() => OnMealSelected(m)"
                    style="cursor:pointer; max-width:240px">
                        <SummaryCard Title="@(m == MealType.PequenoAlmoco ? "Pequenos Almoços" : m == MealType.Almoco ? "Almoços" : "Jantares")"
                        Count="@totalCount"
                        Caption="@($"C {children} / A {adults}")"
                        Background="@(SelectedMeal == m ? "bg-primary text-white" : "bg-secondary bg-opacity-50 text-dark")"
                        Icon="@(m == MealType.PequenoAlmoco ? "fa-coffee" : m == MealType.Almoco ? "fa-utensils" : "fa-drumstick-bite")" />
                    </div>
                }
            </div>
        </div>

        <!-- Data Table -->
        <div class="container">
            <table class="table table-striped mb-0">
                <thead class="bg-light">
                    <tr>
                        <th style="width:30%">Data</th>
                        <th style="width:20%">Adultos</th>
                        <th style="width:20%">Crianças</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @for (var i = 0; i < FilteredGrouped.Count; i++)
                    {
                        var day = FilteredGrouped[i];
                        var detailId = $"detail{i}";

                        <!-- Entire row is now clickable -->
                        <tr class="clickable-row"
                        data-bs-toggle="collapse"
                        data-bs-target="#@detailId"
                        aria-expanded="false"
                        aria-controls="@detailId"
                        style="cursor:pointer">
                            <td>@day.Date.ToString("dd/MM/yyyy")</td>
                            <td>@day.Entries.Sum(e => e.NumeroAdultos)</td>
                            <td>@day.Entries.Sum(e => e.NumeroCriancas)</td>
                            <td><i class="fas fa-chevron-down"></i></td>
                        </tr>

                        <tr class="collapse bg-white" id="@detailId">
                            <td colspan="4" class="p-0">
                                <table class="table table-sm mb-0">
                                    <thead>
                                        <tr class="table-active">
                                            <th>Confirmação</th>
                                            <th>Nome</th>
                                            <th>Apelido</th>
                                            <th>ID Reserva</th>
                                            <th>Linha reserva</th>
                                            <th>Quarto</th>
                                            <th>Adultos</th>
                                            <th>Crianças</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var e in day.Entries)
                                        {
                                            <tr>
                                                <td class="text-center">
                                                    <InputCheckbox @bind-Value="e.Confirmado" @bind-Value:after="() => OnConfirmChanged(e)" />
                                                </td>
                                                <td>@e.NomeHospede</td>
                                                <td>@e.ApelidoHospede</td>
                                                <td>@e.CodigoReserva</td>
                                                <td>@e.CodigoAlojamento</td>
                                                <td>@e.LinhaReserva</td>
                                                <td>@e.NumeroAdultos</td>
                                                <td>@e.NumeroCriancas</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

}

@code {
    private DateTime _from;
    private DateTime From
    {
        get => _from;
        set
        {
            if (_from != value)
            {
                _from = value;
                // Remove automatic reload here
            }
        }
    }

    private DateTime _to;
    private DateTime To
    {
        get => _to;
        set
        {
            if (_to != value)
            {
                _to = value;
                // Remove automatic reload here
            }
        }
    }

    private async Task ReloadDataClicked()
    {
        IsLoadingData = true;
        StateHasChanged();

        await LoadData();

        IsLoadingData = false;
        StateHasChanged();
    }

    private bool IsLoadingPage { get; set; } = true;
    private bool IsLoadingData { get; set; }

    private List<Refeicao> RawList { get; set; } = new();
    private List<DayGroup> FilteredGrouped { get; set; } = new();

    // holds (adults, children) for each meal type
    private Dictionary<MealType, (int Adults, int Children)> MealTotals { get; set; }

    enum MealType { PequenoAlmoco, Almoco, Jantar }
    private MealType SelectedMeal { get; set; } = MealType.PequenoAlmoco;

    protected override async Task OnInitializedAsync()
    {
        _from = await RefeicoesController.GetDia(dbContext);
        _to = _from;
        await LoadData();
        IsLoadingPage = false;
    }

    private async Task ReloadData()
    {
        IsLoadingData = true;
        StateHasChanged();               // show spinner

        await LoadData();                // fetch & apply filter

        IsLoadingData = false;
        StateHasChanged();               // hide spinner & show updated UI
    }


    private async Task LoadData()
    {
        // 1) Load all meals as before
        RawList = (await RefeicoesController
                       .GetRefeicoesData(dbContext, From, To))
                  .ToList();

        // 2) Load all existing confirmations in that date range
        var confirms = (await RefeicoesController.GetConfirmacoesAsync(dbContext, From, To)).ToLookup(
                         c => (c.CodigoRefeicao, c.DataRefeicao.Date, c.TipoRefeicao),
                         c => c.Confirmed);

        // 3) For each meal, set its Confirmado flag — and if missing, insert a default row
        foreach (var r in RawList)
        {
            var code = $"{r.CodigoReserva}_{r.LinhaReserva}";
            var date = r.DataRefeicao.Date;
            var type = r.PequenoAlmoco ? nameof(tipoRefeicao.PequenoAlmoco)
                     : r.Almoco ? nameof(tipoRefeicao.Almoco)
                     : r.Jantar ? nameof(tipoRefeicao.Jantar)
                                       : throw new InvalidOperationException();

            // does a confirmation row already exist?
            var hasConfirm = confirms.Contains((code, date, type));

            if (hasConfirm)
            {
                // use the saved value
                r.Confirmado = confirms[(code, date, type)].First();
            }
            else
            {
                // no record yet: create one (will INSERT via your MERGE)
                r.Confirmado = false;
                await RefeicoesController.SetConfirmacaoAsync(dbContext, r);
            }
        }

        // 4) now recompute totals & grouping, exactly as before
        MealTotals = new Dictionary<MealType, (int, int)>
            {
                [MealType.PequenoAlmoco] = (
                    Adults: RawList.Where(r => r.PequenoAlmoco).Sum(r => r.NumeroAdultos),
                    Children: RawList.Where(r => r.PequenoAlmoco).Sum(r => r.NumeroCriancas)
                ),
                [MealType.Almoco] = (
                    Adults: RawList.Where(r => r.Almoco).Sum(r => r.NumeroAdultos),
                    Children: RawList.Where(r => r.Almoco).Sum(r => r.NumeroCriancas)
                ),
                [MealType.Jantar] = (
                    Adults: RawList.Where(r => r.Jantar).Sum(r => r.NumeroAdultos),
                    Children: RawList.Where(r => r.Jantar).Sum(r => r.NumeroCriancas)
                )
            };

        ApplyFilter();
    }

    private void OnMealSelected(MealType m)
    {
        SelectedMeal = m;
        ApplyFilter();
    }


    private void ApplyFilter()
    {
        var filtered = SelectedMeal switch
        {
            MealType.PequenoAlmoco => RawList.Where(r => r.PequenoAlmoco),
            MealType.Almoco => RawList.Where(r => r.Almoco),
            MealType.Jantar => RawList.Where(r => r.Jantar),
        };

        FilteredGrouped = filtered
            .GroupBy(r => r.DataRefeicao.Date)
            .OrderBy(g => g.Key)
            .Select(g => new DayGroup
                {
                    Date = g.Key,
                    Entries = AggregateUnnamed(g.ToList())
                })
            .ToList();
    }

    /// <summary>
    /// Retorna uma lista de Refeicao onde as entradas sem nome/apelido
    /// são substituídas por UMA só agregação.
    /// </summary>
    private List<Refeicao> AggregateUnnamed(List<Refeicao> list)
    {
        // 1) Entradas com nome/apelido
        var named = list
            .Where(r => !string.IsNullOrWhiteSpace(r.NomeHospede)
                     || !string.IsNullOrWhiteSpace(r.ApelidoHospede))
            .ToList();

        // 2) Entradas SEM nome E SEM apelido
        var unnamed = list
            .Where(r => string.IsNullOrWhiteSpace(r.NomeHospede)
                     && string.IsNullOrWhiteSpace(r.ApelidoHospede))
            .ToList();

        // 3) Se houver, cria agregação
        if (unnamed.Any())
        {
            var agregada = new Refeicao
                {
                    NomeHospede = "(Sem Nome)",
                    ApelidoHospede = "",
                    NumeroAdultos = unnamed.Sum(r => r.NumeroAdultos),
                    NumeroCriancas = unnamed.Sum(r => r.NumeroCriancas),
                    // Copie outras propriedades fixas se precisar (DataRefeicao, flags de meal, etc.)
                    DataRefeicao = unnamed.First().DataRefeicao,
                    PequenoAlmoco = unnamed.First().PequenoAlmoco,
                    Almoco = unnamed.First().Almoco,
                    Jantar = unnamed.First().Jantar
                };

            named.Add(agregada);
        }

        return named;
    }

    private async Task OnConfirmChanged(Refeicao refeicao)
    {
        try
        {

            // // Se você tiver um endpoint API ou método no Controller:
            await RefeicoesController.SetConfirmacaoAsync(dbContext, refeicao);

            ToastService.ShowSuccess($"Confirmado: {refeicao.NomeHospede} {(refeicao.Confirmado ? "✔" : "✘")}");
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Não foi possível salvar a confirmação.");
            Console.Error.WriteLine(ex);
        }
    }

    class DayGroup
    {
        public DateTime Date { get; set; }
        public List<Refeicao> Entries { get; set; } = new();
    }
}
