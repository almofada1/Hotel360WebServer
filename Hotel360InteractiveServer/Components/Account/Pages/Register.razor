@page "/Account/Register"
@attribute [Authorize(Roles = "Admin")]
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Hotel360InteractiveServer.Data
@using Microsoft.EntityFrameworkCore
@using System.Linq;
@using Microsoft.Extensions.Primitives;

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RoleManager
@inject IJSRuntime JS
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Register</PageTitle>

<h1>Register</h1>

@if (!isLoading)
{
    @if (identityErrors != null)
    {
        <div class="alert alert-danger" role="alert">
            @foreach (var error in identityErrors)
            {
                <p>@error.Description</p>
            }
        </div>
    }

    <!-- Using an EditForm that posts data with validation -->
    <style>
        /* Optional: Set a max-width for the form to prevent it from being too wide on large screens */
        .form-container {
            max-width: 500px;
            width: 100%;
            margin-top: 20px;
        }
    </style>

    <div class="d-flex justify-content-center align-items-center">
        <div class="form-container">
            <EditForm Model="Input" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />
                <h2 class="text-center">Create a new account</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />

                <!-- Email Input -->
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" placeholder="name@example.com" />
                    <label for="email">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>

                <!-- Password Input -->
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" placeholder="password" />
                    <label for="password">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>

                <!-- Confirm Password Input -->
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" placeholder="confirm password" />
                    <label for="confirm-password">Confirm Password</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>

                <!-- Roles Selection -->
                <div class="mb-3">
                    <label><strong>Select Roles:</strong></label>
                    @foreach (var role in AvailableRoles)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" name="SelectedRoles" value="@role" id="role_@role" />
                            <label class="form-check-label" for="role_@role">@role</label>
                        </div>
                    }
                </div>

                <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    // The InputModel is bound using [SupplyParameterFromForm]
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private IEnumerable<IdentityError>? identityErrors;
    private List<string> AvailableRoles = new List<string>();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        // Load available roles from the RoleManager.
        AvailableRoles = await RoleManager.Roles.Select(r => r.Name).ToListAsync();
        isLoading = false;
    }

    public async Task RegisterUser()
    {
        var selectedRoles = HttpContextAccessor.HttpContext?.Request.Form["SelectedRoles"] ?? default(StringValues);
        string[] rolesArray = selectedRoles.ToArray();

        if (rolesArray.Length == 0)
        {
            identityErrors = new List<IdentityError>
            {
                new IdentityError { Description = "Please select at least one role." }
            };
            return;
        }

        // Create the user instance.
        var user = CreateUser();
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);


        var result = await UserManager.CreateAsync(user, Input.Password);

        if (result.Succeeded)
        {
            foreach (var role in rolesArray)
            {
                await UserManager.AddToRoleAsync(user, role);
            }
            // For each selected role, add the new user to that role.

            Logger.LogInformation("User created a new account with password.");
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl }
            );
            await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

            if (UserManager.Options.SignIn.RequireConfirmedAccount)
            {
                RedirectManager.RedirectTo("Account/RegisterConfirmation",
                    new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
            }
            else
            {
                await SignInManager.SignInAsync(user, isPersistent: false);
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }
        else
        {
            identityErrors = result.Errors;
        }
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not abstract and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    // The input model for the registration form.
    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 5)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
